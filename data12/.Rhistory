# 3. Aggregates the data by city
# 4. Combines columns where appropriate
# 5. Creates a new data object that omits any columns that are subtotals of other columns
# Reference library for usage later on in the script
library(tidyverse)
# Set the working directory through the script (instead of session in IDE)
# This script assumes you have source .csv files in the folder
# 18 files (all files in the folder)
#setwd("E:/school/University.Guelph/8020001 - Introduction to Data Science/Assignments/Assignment 2/data18")
#groups <- 1
# 18 files (all files in 2 sub folders.  grouped by similar data - TESTING)
setwd("E:/school/University.Guelph/8020001 - Introduction to Data Science/Assignments/Assignment 2/data18group")
goups <- 2
# 12 files (similar columns (1 source file has a few more columns))
#setwd("E:/school/University.Guelph/8020001 - Introduction to Data Science/Assignments/Assignment 2/data12")
#groups <- 1
# Create a list of files from the working directory.
if (groups==2)
setwd("E:/school/University.Guelph/8020001 - Introduction to Data Science/Assignments/Assignment 2/data18group/one")
templist1 = list.files(pattern="*.csv")
setwd("E:/school/University.Guelph/8020001 - Introduction to Data Science/Assignments/Assignment 2/data18group/two")
templist2 = list.files(pattern="*.csv")
# Read in rows from each file in the list (store as individual global datatable object, each with multiple variables)
for (i in 1:length(templist)) assign(templist[i], read.csv(templist[i]))
# Create first record to compare (instantiates the object - could be more efficient)
mergedtable = read.csv(templist[1])
# Create the loop size
loop = length(templist)
loop = loop - 1
# rbind function that adds a new file to the data.table and handles column/variable inconsistencies
rbind.all.columns <- function(x, y)
{
x.diff <- setdiff(colnames(x), colnames(y))
y.diff <- setdiff(colnames(y), colnames(x))
x[, c(as.character(y.diff))] <- 0
y[, c(as.character(x.diff))] <- 0
return(rbind(x, y))
}
# Build the single data table.  Call function that adds needed variables
# If a variable (data table column) is missing add it and assign 0's for each cell in the column
# Now files have the same number of columns and can be merged
for (a in 1:loop)
{
mergedtable <- rbind.all.columns(mergedtable, read.csv(templist[a+1]))
}
# Write the data.table as-is (THIS CAN BE LARGE)
# Uncomment if you need to see the file in Excel
write.csv(mergedtable, "merged/mergedtable.raw.csv")
# Group by City
groupedtable <-arrange(mergedtable, desc(mergedtable$City))
# Uncomment if you need to see the file in Excel
write.csv(groupedtable, "merged/mergedtable.grouped.csv")
# aggregate by City (Total Operating Revenue by City - Average over 1999 to 2010)
#aggregatetable <- select(mergedtable, mergedtable$City, mergedtable$Province, mergedtable$Total.Operating.Revenues)
aggregatetable <-group_by(mergedtable, City)
aggregatetable <-summarise(aggregatetable, "Average City Revenue" = mean(Total.Operating.Revenues, na.rm = TRUE))
write.csv(aggregatetable, "merged/mergedtable.aggregate.csv")
# Filter for something (not required)
#mergedtable <-filter(mergedtable, City == Burlington)
#write.csv(mergedtable, "mergedlist.filtered.csv")
# Plot the data - FOR TESTING
#ggplot(data = aggregatetable, mapping = aes(x = "average.school.revenue", y = aggregatetable$City))
# Assignment #2 script Final
#
# 1. Imports each data file into R
# 2. Merges data files into one object
# 3. Aggregates the data by city
# 4. Combines columns where appropriate
# 5. Creates a new data object that omits any columns that are subtotals of other columns
# Reference library for usage later on in the script
library(tidyverse)
# Set the working directory through the script (instead of session in IDE)
# This script assumes you have source .csv files in the folder
# 18 files (all files in the folder)
#setwd("E:/school/University.Guelph/8020001 - Introduction to Data Science/Assignments/Assignment 2/data18")
#groups <- 1
# 18 files (all files in 2 sub folders.  grouped by similar data - TESTING)
setwd("E:/school/University.Guelph/8020001 - Introduction to Data Science/Assignments/Assignment 2/data18group")
groups <- 2
# 12 files (similar columns (1 source file has a few more columns))
#setwd("E:/school/University.Guelph/8020001 - Introduction to Data Science/Assignments/Assignment 2/data12")
#groups <- 1
# Create a list of files from the working directory.
if (groups==2)
setwd("E:/school/University.Guelph/8020001 - Introduction to Data Science/Assignments/Assignment 2/data18group/one")
templist1 = list.files(pattern="*.csv")
setwd("E:/school/University.Guelph/8020001 - Introduction to Data Science/Assignments/Assignment 2/data18group/two")
templist2 = list.files(pattern="*.csv")
# Read in rows from each file in the list (store as individual global datatable object, each with multiple variables)
for (i in 1:length(templist)) assign(templist[i], read.csv(templist[i]))
# Create first record to compare (instantiates the object - could be more efficient)
mergedtable = read.csv(templist[1])
# Create the loop size
loop = length(templist)
loop = loop - 1
# rbind function that adds a new file to the data.table and handles column/variable inconsistencies
rbind.all.columns <- function(x, y)
{
x.diff <- setdiff(colnames(x), colnames(y))
y.diff <- setdiff(colnames(y), colnames(x))
x[, c(as.character(y.diff))] <- 0
y[, c(as.character(x.diff))] <- 0
return(rbind(x, y))
}
# Build the single data table.  Call function that adds needed variables
# If a variable (data table column) is missing add it and assign 0's for each cell in the column
# Now files have the same number of columns and can be merged
for (a in 1:loop)
{
mergedtable <- rbind.all.columns(mergedtable, read.csv(templist[a+1]))
}
# Write the data.table as-is (THIS CAN BE LARGE)
# Uncomment if you need to see the file in Excel
write.csv(mergedtable, "merged/mergedtable.raw.csv")
# Group by City
groupedtable <-arrange(mergedtable, desc(mergedtable$City))
# Uncomment if you need to see the file in Excel
write.csv(groupedtable, "merged/mergedtable.grouped.csv")
# aggregate by City (Total Operating Revenue by City - Average over 1999 to 2010)
#aggregatetable <- select(mergedtable, mergedtable$City, mergedtable$Province, mergedtable$Total.Operating.Revenues)
aggregatetable <-group_by(mergedtable, City)
aggregatetable <-summarise(aggregatetable, "Average City Revenue" = mean(Total.Operating.Revenues, na.rm = TRUE))
write.csv(aggregatetable, "merged/mergedtable.aggregate.csv")
# Filter for something (not required)
#mergedtable <-filter(mergedtable, City == Burlington)
#write.csv(mergedtable, "mergedlist.filtered.csv")
# Plot the data - FOR TESTING
#ggplot(data = aggregatetable, mapping = aes(x = "average.school.revenue", y = aggregatetable$City))
# Assignment #2 script Final
#
# 1. Imports each data file into R
# 2. Merges data files into one object
# 3. Aggregates the data by city
# 4. Combines columns where appropriate
# 5. Creates a new data object that omits any columns that are subtotals of other columns
# Reference library for usage later on in the script
library(tidyverse)
# Set the working directory through the script (instead of session in IDE)
# This script assumes you have source .csv files in the folder
# 18 files (all files in the folder)
#setwd("E:/school/University.Guelph/8020001 - Introduction to Data Science/Assignments/Assignment 2/data18")
#groups <- 1
# 18 files (all files in 2 sub folders.  grouped by similar data - TESTING)
#setwd("E:/school/University.Guelph/8020001 - Introduction to Data Science/Assignments/Assignment 2/data18group")
#groups <- 2
# 12 files (similar columns (1 source file has a few more columns))
setwd("E:/school/University.Guelph/8020001 - Introduction to Data Science/Assignments/Assignment 2/data12")
groups <- 1
# Create a list of files from the working directory.
if (groups==2)
setwd("E:/school/University.Guelph/8020001 - Introduction to Data Science/Assignments/Assignment 2/data18group/one")
templist1 = list.files(pattern="*.csv")
setwd("E:/school/University.Guelph/8020001 - Introduction to Data Science/Assignments/Assignment 2/data18group/two")
templist2 = list.files(pattern="*.csv")
# Read in rows from each file in the list (store as individual global datatable object, each with multiple variables)
for (i in 1:length(templist)) assign(templist[i], read.csv(templist[i]))
# Create first record to compare (instantiates the object - could be more efficient)
mergedtable = read.csv(templist[1])
# Create the loop size
loop = length(templist)
loop = loop - 1
# rbind function that adds a new file to the data.table and handles column/variable inconsistencies
rbind.all.columns <- function(x, y)
{
x.diff <- setdiff(colnames(x), colnames(y))
y.diff <- setdiff(colnames(y), colnames(x))
x[, c(as.character(y.diff))] <- 0
y[, c(as.character(x.diff))] <- 0
return(rbind(x, y))
}
# Build the single data table.  Call function that adds needed variables
# If a variable (data table column) is missing add it and assign 0's for each cell in the column
# Now files have the same number of columns and can be merged
for (a in 1:loop)
{
mergedtable <- rbind.all.columns(mergedtable, read.csv(templist[a+1]))
}
# Write the data.table as-is (THIS CAN BE LARGE)
# Uncomment if you need to see the file in Excel
write.csv(mergedtable, "merged/mergedtable.raw.csv")
# Group by City
groupedtable <-arrange(mergedtable, desc(mergedtable$City))
# Uncomment if you need to see the file in Excel
write.csv(groupedtable, "merged/mergedtable.grouped.csv")
# aggregate by City (Total Operating Revenue by City - Average over 1999 to 2010)
#aggregatetable <- select(mergedtable, mergedtable$City, mergedtable$Province, mergedtable$Total.Operating.Revenues)
aggregatetable <-group_by(mergedtable, City)
aggregatetable <-summarise(aggregatetable, "Average City Revenue" = mean(Total.Operating.Revenues, na.rm = TRUE))
write.csv(aggregatetable, "merged/mergedtable.aggregate.csv")
# Filter for something (not required)
#mergedtable <-filter(mergedtable, City == Burlington)
#write.csv(mergedtable, "mergedlist.filtered.csv")
# Plot the data - FOR TESTING
#ggplot(data = aggregatetable, mapping = aes(x = "average.school.revenue", y = aggregatetable$City))
# Assignment #2 script Final
#
# 1. Imports each data file into R
# 2. Merges data files into one object
# 3. Aggregates the data by city
# 4. Combines columns where appropriate
# 5. Creates a new data object that omits any columns that are subtotals of other columns
# Reference library for usage later on in the script
library(tidyverse)
# Set the working directory through the script (instead of session in IDE)
# This script assumes you have source .csv files in the folder
# 18 files (all files in the folder)
#setwd("E:/school/University.Guelph/8020001 - Introduction to Data Science/Assignments/Assignment 2/data18")
#groups <- 1
# 18 files (all files in 2 sub folders.  grouped by similar data - TESTING)
#setwd("E:/school/University.Guelph/8020001 - Introduction to Data Science/Assignments/Assignment 2/data18group")
#groups <- 2
# 12 files (similar columns (1 source file has a few more columns))
setwd("E:/school/University.Guelph/8020001 - Introduction to Data Science/Assignments/Assignment 2/data12")
groups <- 1
# Create a list of files from the working directory.
if (groups==1)
templist = list.files(pattern="*.csv")
if (groups==2)
setwd("E:/school/University.Guelph/8020001 - Introduction to Data Science/Assignments/Assignment 2/data18group/one")
templist1 = list.files(pattern="*.csv")
setwd("E:/school/University.Guelph/8020001 - Introduction to Data Science/Assignments/Assignment 2/data18group/two")
templist2 = list.files(pattern="*.csv")
# Read in rows from each file in the list (store as individual global datatable object, each with multiple variables)
for (i in 1:length(templist)) assign(templist[i], read.csv(templist[i]))
# Create first record to compare (instantiates the object - could be more efficient)
mergedtable = read.csv(templist[1])
# Create the loop size
loop = length(templist)
loop = loop - 1
# rbind function that adds a new file to the data.table and handles column/variable inconsistencies
rbind.all.columns <- function(x, y)
{
x.diff <- setdiff(colnames(x), colnames(y))
y.diff <- setdiff(colnames(y), colnames(x))
x[, c(as.character(y.diff))] <- 0
y[, c(as.character(x.diff))] <- 0
return(rbind(x, y))
}
# Build the single data table.  Call function that adds needed variables
# If a variable (data table column) is missing add it and assign 0's for each cell in the column
# Now files have the same number of columns and can be merged
for (a in 1:loop)
{
mergedtable <- rbind.all.columns(mergedtable, read.csv(templist[a+1]))
}
# Write the data.table as-is (THIS CAN BE LARGE)
# Uncomment if you need to see the file in Excel
write.csv(mergedtable, "merged/mergedtable.raw.csv")
# Group by City
groupedtable <-arrange(mergedtable, desc(mergedtable$City))
# Uncomment if you need to see the file in Excel
write.csv(groupedtable, "merged/mergedtable.grouped.csv")
# aggregate by City (Total Operating Revenue by City - Average over 1999 to 2010)
#aggregatetable <- select(mergedtable, mergedtable$City, mergedtable$Province, mergedtable$Total.Operating.Revenues)
aggregatetable <-group_by(mergedtable, City)
aggregatetable <-summarise(aggregatetable, "Average City Revenue" = mean(Total.Operating.Revenues, na.rm = TRUE))
write.csv(aggregatetable, "merged/mergedtable.aggregate.csv")
# Filter for something (not required)
#mergedtable <-filter(mergedtable, City == Burlington)
#write.csv(mergedtable, "mergedlist.filtered.csv")
# Plot the data - FOR TESTING
#ggplot(data = aggregatetable, mapping = aes(x = "average.school.revenue", y = aggregatetable$City))
# Assignment #2 script Final
#
# 1. Imports each data file into R
# 2. Merges data files into one object
# 3. Aggregates the data by city
# 4. Combines columns where appropriate
# 5. Creates a new data object that omits any columns that are subtotals of other columns
# Reference library for usage later on in the script
library(tidyverse)
# Set the working directory through the script (instead of session in IDE)
# This script assumes you have source .csv files in the folder
# 18 files (all files in the folder)
#setwd("E:/school/University.Guelph/8020001 - Introduction to Data Science/Assignments/Assignment 2/data18")
#groups <- 1
# 18 files (all files in 2 sub folders.  grouped by similar data - TESTING)
#setwd("E:/school/University.Guelph/8020001 - Introduction to Data Science/Assignments/Assignment 2/data18group")
#groups <- 2
# 12 files (similar columns (1 source file has a few more columns))
setwd("E:/school/University.Guelph/8020001 - Introduction to Data Science/Assignments/Assignment 2/data12")
#groups <- 1
# Create a list of files from the working directory.
if (groups==1)
templist = list.files(pattern="*.csv")
#if (groups==2)
#setwd("E:/school/University.Guelph/8020001 - Introduction to Data Science/Assignments/Assignment 2/data18group/one")
#templist1 = list.files(pattern="*.csv")
#setwd("E:/school/University.Guelph/8020001 - Introduction to Data Science/Assignments/Assignment 2/data18group/two")
#templist2 = list.files(pattern="*.csv")
# Read in rows from each file in the list (store as individual global datatable object, each with multiple variables)
for (i in 1:length(templist)) assign(templist[i], read.csv(templist[i]))
# Create first record to compare (instantiates the object - could be more efficient)
mergedtable = read.csv(templist[1])
# Create the loop size
loop = length(templist)
loop = loop - 1
# rbind function that adds a new file to the data.table and handles column/variable inconsistencies
rbind.all.columns <- function(x, y)
{
x.diff <- setdiff(colnames(x), colnames(y))
y.diff <- setdiff(colnames(y), colnames(x))
x[, c(as.character(y.diff))] <- 0
y[, c(as.character(x.diff))] <- 0
return(rbind(x, y))
}
# Build the single data table.  Call function that adds needed variables
# If a variable (data table column) is missing add it and assign 0's for each cell in the column
# Now files have the same number of columns and can be merged
for (a in 1:loop)
{
mergedtable <- rbind.all.columns(mergedtable, read.csv(templist[a+1]))
}
# Write the data.table as-is (THIS CAN BE LARGE)
# Uncomment if you need to see the file in Excel
write.csv(mergedtable, "merged/mergedtable.raw.csv")
# Group by City
groupedtable <-arrange(mergedtable, desc(mergedtable$City))
# Uncomment if you need to see the file in Excel
write.csv(groupedtable, "merged/mergedtable.grouped.csv")
# aggregate by City (Total Operating Revenue by City - Average over 1999 to 2010)
#aggregatetable <- select(mergedtable, mergedtable$City, mergedtable$Province, mergedtable$Total.Operating.Revenues)
aggregatetable <-group_by(mergedtable, City)
aggregatetable <-summarise(aggregatetable, "Average City Revenue" = mean(Total.Operating.Revenues, na.rm = TRUE))
write.csv(aggregatetable, "merged/mergedtable.aggregate.csv")
# Filter for something (not required)
#mergedtable <-filter(mergedtable, City == Burlington)
#write.csv(mergedtable, "mergedlist.filtered.csv")
# Plot the data - FOR TESTING
#ggplot(data = aggregatetable, mapping = aes(x = "average.school.revenue", y = aggregatetable$City))
# Assignment #2 script Final
#
# 1. Imports each data file into R
# 2. Merges data files into one object
# 3. Aggregates the data by city
# 4. Combines columns where appropriate
# 5. Creates a new data object that omits any columns that are subtotals of other columns
# Reference library for usage later on in the script
library(tidyverse)
# Set the working directory through the script (instead of session in IDE)
# This script assumes you have source .csv files in the folder
# 18 files (all files in the folder)
#setwd("E:/school/University.Guelph/8020001 - Introduction to Data Science/Assignments/Assignment 2/data18")
#groups <- 1
# 18 files (all files in 2 sub folders.  grouped by similar data - TESTING)
#setwd("E:/school/University.Guelph/8020001 - Introduction to Data Science/Assignments/Assignment 2/data18group")
#groups <- 2
# 12 files (similar columns (1 source file has a few more columns))
setwd("E:/school/University.Guelph/8020001 - Introduction to Data Science/Assignments/Assignment 2/data12")
#groups <- 1
# Create a list of files from the working directory.
#if (groups==1)
templist = list.files(pattern="*.csv")
#if (groups==2)
#setwd("E:/school/University.Guelph/8020001 - Introduction to Data Science/Assignments/Assignment 2/data18group/one")
#templist1 = list.files(pattern="*.csv")
#setwd("E:/school/University.Guelph/8020001 - Introduction to Data Science/Assignments/Assignment 2/data18group/two")
#templist2 = list.files(pattern="*.csv")
# Read in rows from each file in the list (store as individual global datatable object, each with multiple variables)
for (i in 1:length(templist)) assign(templist[i], read.csv(templist[i]))
# Create first record to compare (instantiates the object - could be more efficient)
mergedtable = read.csv(templist[1])
# Create the loop size
loop = length(templist)
loop = loop - 1
# rbind function that adds a new file to the data.table and handles column/variable inconsistencies
rbind.all.columns <- function(x, y)
{
x.diff <- setdiff(colnames(x), colnames(y))
y.diff <- setdiff(colnames(y), colnames(x))
x[, c(as.character(y.diff))] <- 0
y[, c(as.character(x.diff))] <- 0
return(rbind(x, y))
}
# Build the single data table.  Call function that adds needed variables
# If a variable (data table column) is missing add it and assign 0's for each cell in the column
# Now files have the same number of columns and can be merged
for (a in 1:loop)
{
mergedtable <- rbind.all.columns(mergedtable, read.csv(templist[a+1]))
}
# Write the data.table as-is (THIS CAN BE LARGE)
# Uncomment if you need to see the file in Excel
write.csv(mergedtable, "merged/mergedtable.raw.csv")
# Group by City
groupedtable <-arrange(mergedtable, desc(mergedtable$City))
# Uncomment if you need to see the file in Excel
write.csv(groupedtable, "merged/mergedtable.grouped.csv")
# aggregate by City (Total Operating Revenue by City - Average over 1999 to 2010)
#aggregatetable <- select(mergedtable, mergedtable$City, mergedtable$Province, mergedtable$Total.Operating.Revenues)
aggregatetable <-group_by(mergedtable, City)
aggregatetable <-summarise(aggregatetable, "Average City Revenue" = mean(Total.Operating.Revenues, na.rm = TRUE))
write.csv(aggregatetable, "merged/mergedtable.aggregate.csv")
# Filter for something (not required)
#mergedtable <-filter(mergedtable, City == Burlington)
#write.csv(mergedtable, "mergedlist.filtered.csv")
# Plot the data - FOR TESTING
#ggplot(data = aggregatetable, mapping = aes(x = "average.school.revenue", y = aggregatetable$City))
# Assignment #2 script Final
#
# 1. Imports each data file into R
# 2. Merges data files into one object
# 3. Aggregates the data by city
# 4. Combines columns where appropriate
# 5. Creates a new data object that omits any columns that are subtotals of other columns
# Reference library for usage later on in the script
library(tidyverse)
# Set the working directory through the script (instead of session in IDE)
# This script assumes you have source .csv files in the folder
# 18 files (all files in the folder)
#setwd("E:/school/University.Guelph/8020001 - Introduction to Data Science/Assignments/Assignment 2/data18")
# 12 files (similar columns (1 source file has a few more columns))
setwd("E:/school/University.Guelph/8020001 - Introduction to Data Science/Assignments/Assignment 2/data12")
# Create a list of files from the working directory.
templist = list.files(pattern="*.csv")
# Read in rows from each file in the list (store as individual global datatable object, each with multiple variables)
for (i in 1:length(templist)) assign(templist[i], read.csv(templist[i]))
# Create first record to compare (instantiates the object - could be more efficient)
mergedtable = read.csv(templist[1])
# Create the loop size
loop = length(templist)
loop = loop - 1
# rbind function that adds a new file to the data.table and handles column/variable inconsistencies
rbind.all.columns <- function(x, y)
{
x.diff <- setdiff(colnames(x), colnames(y))
y.diff <- setdiff(colnames(y), colnames(x))
x[, c(as.character(y.diff))] <- NA
y[, c(as.character(x.diff))] <- NA
return(rbind(x, y))
}
# Build the single data table.  Call function that adds needed variables
# If a variable (data table column) is missing add it and assign 0's for each cell in the column
# Now files have the same number of columns and can be merged
for (a in 1:loop)
{
mergedtable <- rbind.all.columns(mergedtable, read.csv(templist[a+1]))
}
# Write the data.table as-is (THIS CAN BE LARGE)
# Uncomment if you need to see the file in Excel
write.csv(mergedtable, "merged/mergedtable.raw.csv")
# Group by City
groupedtable <-arrange(mergedtable, desc(mergedtable$City))
# Uncomment if you need to see the file in Excel
write.csv(groupedtable, "merged/mergedtable.grouped.csv")
# aggregate by City (Total Operating Revenue by City - Average over 1999 to 2010)
#aggregatetable <- select(mergedtable, mergedtable$City, mergedtable$Province, mergedtable$Total.Operating.Revenues)
aggregatetable <-group_by(mergedtable, City)
aggregatetable <-summarise(aggregatetable, "Average City Revenue" = mean(Total.Operating.Revenues, na.rm = TRUE))
write.csv(aggregatetable, "merged/mergedtable.aggregate.csv")
# Filter for something (not required)
#mergedtable <-filter(mergedtable, City == Burlington)
#write.csv(mergedtable, "mergedlist.filtered.csv")
# Plot the data - FOR TESTING
#ggplot(data = aggregatetable, mapping = aes(x = "average.school.revenue", y = aggregatetable$City))
# Assignment #2 script Final
#
# 1. Imports each data file into R
# 2. Merges data files into one object
# 3. Aggregates the data by city
# 4. Combines columns where appropriate
# 5. Creates a new data object that omits any columns that are subtotals of other columns
# Reference library for usage later on in the script
library(tidyverse)
# Set the working directory through the script (instead of session in IDE)
# This script assumes you have source .csv files in the folder
# 18 files (all files in the folder)
#setwd("E:/school/University.Guelph/8020001 - Introduction to Data Science/Assignments/Assignment 2/data18")
# 12 files (similar columns (1 source file has a few more columns))
setwd("E:/school/University.Guelph/8020001 - Introduction to Data Science/Assignments/Assignment 2/data12")
# Create a list of files from the working directory.
templist = list.files(pattern="*.csv")
# Read in rows from each file in the list (store as individual global datatable object, each with multiple variables)
for (i in 1:length(templist)) assign(templist[i], read.csv(templist[i]))
# Create first record to compare (instantiates the object - could be more efficient)
mergedtable = read.csv(templist[1])
# Create the loop size
loop = length(templist)
loop = loop - 1
# rbind function that adds a new file to the data.table and handles column/variable inconsistencies
rbind.all.columns <- function(x, y)
{
x.diff <- setdiff(colnames(x), colnames(y))
y.diff <- setdiff(colnames(y), colnames(x))
x[, c(as.character(y.diff))] <- NA
y[, c(as.character(x.diff))] <- NA
return(rbind(x, y))
}
# Build the single data table.  Call function that adds needed variables
# If a variable (data table column) is missing add it and assign 0's for each cell in the column
# Now files have the same number of columns and can be merged
for (a in 1:loop)
{
mergedtable <- rbind.all.columns(mergedtable, read.csv(templist[a+1]))
}
# Write the data.table as-is (THIS CAN BE LARGE)
# Uncomment if you need to see the file in Excel
write.csv(mergedtable, "merged/mergedtable.raw.csv")
# Group by City
groupedtable <-arrange(mergedtable, desc(mergedtable$City))
# Uncomment if you need to see the file in Excel
write.csv(groupedtable, "merged/mergedtable.grouped.csv")
# aggregate by City (Total Operating Revenue by City - Average over 1999 to 2010)
#aggregatetable <- select(mergedtable, mergedtable$City, mergedtable$Province, mergedtable$Total.Operating.Revenues)
aggregatetable <-group_by(mergedtable, City)
aggregatetable <-summarise(aggregatetable, "Average City Revenue" = mean(Total.Operating.Revenues, na.rm = TRUE))
write.csv(aggregatetable, "merged/mergedtable.aggregate.csv")
# Filter for something (not required)
#mergedtable <-filter(mergedtable, City == Burlington)
#write.csv(mergedtable, "mergedlist.filtered.csv")
# Plot the data - FOR TESTING
ggplot(data = aggregatetable, mapping = aes(x = "average.school.revenue", y = aggregatetable$City))
